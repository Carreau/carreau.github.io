<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="../assets/xml/rss.xsl" media="all"?><rss xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title>Random Thoughts (Posts about python)</title><link>https://carreau.github.io/</link><description></description><atom:link rel="self" href="https://carreau.github.io/categories/python.xml" type="application/rss+xml"></atom:link><language>en</language><lastBuildDate>Mon, 04 Dec 2017 13:35:08 GMT</lastBuildDate><generator>Nikola (getnikola.com)</generator><docs>http://blogs.law.harvard.edu/tech/rss</docs><item><title>One less Pull Request</title><link>https://carreau.github.io/posts/21-one-less-pull-request.md.html</link><dc:creator>Matthias Bussonnier</dc:creator><description>&lt;div&gt;&lt;p&gt;This time of the year again, it's soon going to be the period where many
websites and organisation will push you to make contribution to Open-Source,
for example via &lt;a href="https://hacktoberfest.digitalocean.com/"&gt;hacktoberfest&lt;/a&gt; I got
a nice T-shirt last year, and &lt;a href="http://24pullrequests.com/"&gt;24pullrequests&lt;/a&gt; seem
to get tractions as well each years. Theses are really nice incentive that push
users of open-source to start contributing and already seasons developers to
try touch new project. &lt;/p&gt;
&lt;p&gt;Here is a request I got for you whether you participate or not to these events:
Please close a Pull Request. &lt;/p&gt;
&lt;h2&gt;Less is More&lt;/h2&gt;
&lt;p&gt;While I really appreciate having new contributions, there is a point were too
many opened pull-requests can – I think – be harmful. I'm going to expose the
various case, why I think these are harmful and what can be done.&lt;/p&gt;
&lt;p&gt;Here are two specific examples : the &lt;a href="https://github.com/sympy/sympy"&gt;Sympy
Project&lt;/a&gt; (as &lt;a href="https://twitter.com/asmeurer/status/780512119024410625"&gt;Aaron feel
targeted&lt;/a&gt;), the authors
are absolutely extraordinary and reactive. The current count of opened PR is
378. &lt;a href="https://github.com/matplotlib/matplotlib"&gt;Matplotlib&lt;/a&gt; is also apparently
at &lt;a href="https://twitter.com/tacaswell/status/780508160490692609"&gt;207&lt;/a&gt;. You can see
in the discussion linked here that maintainers feel differently about high
number of PRs.&lt;/p&gt;
&lt;h3&gt;I open to many pull requests&lt;/h3&gt;
&lt;p&gt;I currently have 12 opened pull requests, see how many &lt;a href="https://github.com/pulls"&gt;you
have&lt;/a&gt;. This mean that I (at least) have to follow-up
with around 12 projects every days. This is an extremely hight cognitive cost
of switching. I try to not keep a PR older than 6 month. If it's older then
it's most likely not going to be merged or taken care of by the maintainers.
Every time I get to this screen I at least spend 30 sec wondering what to do
about old PRs.&lt;/p&gt;
&lt;p&gt;My advice is to stay focus: If you are not going to work on a Pull Request, let
the maintainers know about this fact: close it. It can still be reopened. You
might want to leave a message explaining why you are not working on it, and
that you would be happy (or not), for someone else to take over.&lt;/p&gt;
&lt;p&gt;I'm now back to 8. It fits on one screen, I can be more focused.&lt;/p&gt;
&lt;p&gt;Also if you are a maintainer and know a pull-request will likely not get
merged, I would prefer you don't give me false hope, and close it. Explain why.
Even if it's just that's you are busy on something else and would appreciate if
this was resubmitted later. I'm more likely to get over it and try a few other
time than if my first contribution got no responses.&lt;/p&gt;
&lt;h3&gt;I receive too many pull-requests&lt;/h3&gt;
&lt;p&gt;I strongly encourage you to try
&lt;a href="https://minrk.github.io/all-my-pulls/"&gt;minrk.github.io/all-my-pulls&lt;/a&gt; it allows
you to view all the pull-requests you have the ability to merge. And filter by
repositories you do not wish to see. After filtering, I have 61 pull requests
in 19 repos. It is too much to stay focused as well.&lt;/p&gt;
&lt;p&gt;Many of these pull-requests have stalled, and I would gladly appreciate for the
authors to close them if they have no intention on working on things. To be
honest many of the oldest pull-requests have entered this "Awkward state" of
wanting to close it but not actually doing so because it can be rough for the
author to see his work dismiss. &lt;/p&gt;
&lt;p&gt;As a maintainer I should do a better job as saying when a Pull request have
stalled and is just polluting the PR list. Close it with a nice explanation.
It's always possible to reopen if needed. GitHub allows canned responses, I use
it as a template to list the policy of PR closing. I've found that &lt;a href="http://jupyter.readthedocs.io/en/latest/development_guide/closing_prs.html"&gt;having a
clear
policy&lt;/a&gt;
often make decision easier. And sometime closing even allow work to be
resubmitted, to appear on the top of the pile, and start anew.&lt;/p&gt;
&lt;p&gt;There is also the possibility of taking over the author work and finishing up
in a separate PR, or push directly on authors forks if he is allowing it. I
personally rarely do that, as I feel like it is a slippery slope for the
maintainer to do everything.&lt;/p&gt;
&lt;p&gt;I find myself much more efficient when there is only 5 to 6 opened
pull-requests. I can keep track of each of them, judge whether or not the work
will conflict and give proper care to each of these. I fail to do so when there
are many pages. &lt;/p&gt;
&lt;h3&gt;I don't contribute to repository that have too many PRs.&lt;/h3&gt;
&lt;p&gt;When I come across a repository with more than 20-ish pull-requests, I tend to
think that the authors are not responding so why bother to contribute. I know
that often these are only &lt;em&gt;impressions&lt;/em&gt; and I can get over it because &lt;em&gt;I have
the chance&lt;/em&gt; to often know the maintainers. This feeling is though hard to get
over on repositories I'm new to.&lt;/p&gt;
&lt;p&gt;With a high number of opened PRs, I tend to also be discouraged at searching
whether someone is fixing the bug I saw, or implementing the feature I wish.
Moreover the higher the number of opened PRs the more chance there is for the
maintainers to review my PR in a long time, and the higher chance there will be
that I will need to &lt;a href="https://git-scm.com/docs/git-rebase"&gt;rebase&lt;/a&gt; my work,
which regardless of whether you are a git master &lt;a href="https://xkcd.com/1597/"&gt;or
not&lt;/a&gt; can be painful process to go through (and to ask
someone to go through).&lt;/p&gt;
&lt;p&gt;I'm pretty certain I'm not the only one to be discouraged from seeing a large
number of open non active Pull requests. I've
&lt;a href="https://twitter.com/Mbussonn/status/780474037977751552"&gt;asked&lt;/a&gt; on twitter and
it looks like roughly every other respondent are discouraged to contribute if
too many PR are opened.&lt;/p&gt;
&lt;h2&gt;What do you think ?&lt;/h2&gt;
&lt;p&gt;The above paragraphs are my though on too many opened pull-requests ? How are
you feeling about that ? As you might have read in the twitter conversation
linked to above, different people have different opinions.&lt;/p&gt;
&lt;p&gt;If you want to comment, please open an &lt;a href="https://github.com/Carreau/posts/issues"&gt;issue on
GitHub&lt;/a&gt;, and if you have the courage
to help improve my English feel free to send me a PR (sic) to make this more
readable.&lt;/p&gt;
&lt;h2&gt;Close a PR !&lt;/h2&gt;
&lt;p&gt;Thanks you for reading up until here ! If you want to restore part of the
sanity of some maintainers, or want to appeal a bit more to some users, please
go close a PRs ! Or help finish a Pr that have stalled ! I can't give you a
free T-shirt like for HactoberFest but feel free to tweet with hashtag
&lt;code&gt;#IClosedAPR&lt;/code&gt; !&lt;/p&gt;&lt;/div&gt;</description><category>open-source</category><category>python</category><guid>https://carreau.github.io/posts/21-one-less-pull-request.md.html</guid><pubDate>Mon, 26 Sep 2016 20:00:00 GMT</pubDate></item><item><title>Planning an Early Death for Python 2</title><link>https://carreau.github.io/posts/planning-an-early-death-for-python-2.html</link><dc:creator>Matthias Bussonnier</dc:creator><description>&lt;div&gt;&lt;p&gt;On September 18 and 19, 2015, the Data Structure for Data Science workshop
gathered at UC Berkeley's BIDS [Berkeley Institute for Data Science]. It was a
productive two days of presentation, discussion and working groups — a
collaborative effort aimed at expanding what data science can do.&lt;/p&gt;
&lt;p&gt;Despite having mostly Python developers, the workshop reached out and included
members from many other programming communities (e.g., C, C++, Julia, R, etc.)
as the workshop's explicit goal was to improve cross language operability. In
particular, the goal was to enable python's scientific computing tools
(numpy, scipy, pandas, etc.) to have a consensus backbone data-structure that
would enable easier interaction with other programming languages.&lt;/p&gt;
&lt;p&gt;Out of the discussion arose a topic that has long plagued the python community
at large: code that requires legacy Python 2.7 is holding back the development
of data-science toolsets and – by extension – the progress of data science as a
whole. Python 2.7 was an important part of the history of scientific computing,
but now it should be left as part of that history. Thus, we convened a small
working group to plan a early death for Legacy Python.&lt;/p&gt;
&lt;h3&gt;Move over Legacy Python once and for all.&lt;/h3&gt;
&lt;p&gt;In collaboration with many developers among whom @jiffyclub, @tacasswell,
@kbarbary, @teoliphant, @pzwang, @ogrisel, we discussed different options to
push Legacy Python more or less gently through the door. We understand that
some people are still requiring the use of Legacy Python in their code base, or
the use some libraries which are still only available on Legacy Python and we
don't blame them.  We understand that Legacy Python was a great language and
that it's hard to move over it.  Though the retirement of Legacy Python is
2020, you will ave to make the transition then, and it will be even harder to
transition at that point.&lt;/p&gt;
&lt;p&gt;So what are the step we can do to push the transition forward.&lt;/p&gt;
&lt;h3&gt;Choose your words.&lt;/h3&gt;
&lt;p&gt;The choice of words you make on the internet and in real life will influence
the vision people have for Legacy Python vs Python. Assume that Python 3 is
just Python, and refer to Python 2 as legacy python.  IDEs and TwitterSphere is
&lt;a href="https://twitter.com/astrofrog/status/646976176657932288"&gt;starting&lt;/a&gt; to &lt;a href="https://twitter.com/almarklein/status/645542438937980929"&gt;do
that&lt;/a&gt;, join the
movement.&lt;/p&gt;
&lt;p&gt;Refer to Legacy Python in the past tense. It will reinforce the old and
deprecated state of Legacy Python. I still don't understand why people would
like to stay with a language which that many defects:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;it did not protect you from mixing Unicode and bytes,&lt;/li&gt;
&lt;li&gt;tripped you with integer division&lt;/li&gt;
&lt;li&gt;did not allow you to replace the printing function&lt;/li&gt;
&lt;li&gt;had a range object which is not memory efficient&lt;/li&gt;
&lt;li&gt;did not permit to re-raise exception&lt;/li&gt;
&lt;li&gt;had a bad asynchronous support, without yield from&lt;/li&gt;
&lt;li&gt;forced you to repeat the current class in &lt;code&gt;super()&lt;/code&gt; call.&lt;/li&gt;
&lt;li&gt;let you mix tab and space.&lt;/li&gt;
&lt;li&gt;did not support function annotations&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Legacy Python was missing many other feature which are now part of Python.&lt;/p&gt;
&lt;p&gt;Do not state what's better in Python 3, state that it was missing/broken in
Legacy Python.  Like the missing matrix multiplication operator was missing
multiplication operator. Legacy Python was preventing people to use efficient
numeric library which are relying on the numerical operator.&lt;/p&gt;
&lt;h3&gt;Don't respond to "and on Python 2"&lt;/h3&gt;
&lt;p&gt;Personally during talks I plan to not pay attention to question regarding
legacy Python, and will treat questions such questions as someone asking whether
I support windows Vista. Next question please. The less you talk about Legacy Python
the more you imply Legacy Python  is not a thing anymore.&lt;/p&gt;
&lt;h3&gt;Drop support for Legacy Python (at least on paper)&lt;/h3&gt;
&lt;p&gt;If you a library author, you have probably had to deal with user trying your
software on Legacy Python, and spend lot of time making your codebase
compatible with both Python 3 and legacy Python.  There are a few step you can
take to push user toward Python 3.&lt;/p&gt;
&lt;p&gt;If a user is not willing to update to a new version on Python, and decide to stay on
legacy Python, they can most likely pin the version on your library to versions which
support Legacy Python.&lt;/p&gt;
&lt;h4&gt;Make your examples/documentation Python 3 only&lt;/h4&gt;
&lt;p&gt;Or at least do not make effort to have examples that work using Legacy Python.
Sprinkle with function annotation, and &lt;code&gt;async&lt;/code&gt;/&lt;code&gt;await&lt;/code&gt; keyword can help with
communicating your example are Python 3 only.&lt;/p&gt;
&lt;p&gt;You can even avoid mention of Legacy Python in your documentation and assume
your users are using Python 3, this will make writing documentation much easier,
and increase the chances to get examples right.&lt;/p&gt;
&lt;h4&gt;Ask user to reproduce but on up-to-date Python version.&lt;/h4&gt;
&lt;p&gt;Have you ever had a bug report where you ask users to upgrade your libraries
dependencies ? Do the same with Python. If a user make a bug report with Python
2.7 ask them if they can reproduce with an up-to date version of Python, even
if the bug is obviously from your side.  If they really can't upgrade they will
know, if they do and can reproduce, then you'll have at least converted one
user from Legacy Python (and in the meantime you might have already corrected
the bug).&lt;/p&gt;
&lt;h4&gt;Defer 2.7 support to companies like Continuum&lt;/h4&gt;
&lt;p&gt;This is already what &lt;a href="http://www.curiousefficiency.org/posts/2015/04/stop-supporting-python26.html"&gt;Nick Coghlan
recommands&lt;/a&gt;
for Python 2.6, and that's what you can do for Legacy Python fix. If you
have a sufficient number of user which are asking for 2.7 support, accept the
bug report, but as an open source maintainer do not work on it. You can partner
with companies like Continuum or Enthought, from which user would "buy" 2.7 support
for your libraries, in exchange of which the Companies could spend some of their
developer time fixing your Legacy Python bugs.&lt;/p&gt;
&lt;p&gt;After a quick discussion with Peter Wang, it would be possible, but details
need to be worked on.&lt;/p&gt;
&lt;h3&gt;Make Python 3 attractive&lt;/h3&gt;
&lt;h4&gt;Create new features&lt;/h4&gt;
&lt;p&gt;Plan you new features explicitly for Python 3, even if the feature would be
simple to make Legacy Python compatible, disable it on old platforms, and issue
a warning indicating that the feature is not available on Legacy Python
install.&lt;/p&gt;
&lt;p&gt;You will be able to use all the shiny Python features which are lacking on
Legacy Python like Unicode characters !&lt;/p&gt;
&lt;h4&gt;Create new Python packages&lt;/h4&gt;
&lt;p&gt;Make new packages Python 3 only, and make all the design decision you didn't do
on your previous package. Pure python libraries are much easier to create and
&lt;a href="http://flit.readthedocs.org/en/latest/"&gt;build&lt;/a&gt;  once you are not hold back by
legacy Python.&lt;/p&gt;
&lt;h3&gt;Helping Other project&lt;/h3&gt;
&lt;p&gt;Despite all the good will in the world the Migration path from Legacy Python
can be hard.  There are still a lot of things that can be done to help current
and new project to push forward the adoption of Python.&lt;/p&gt;
&lt;h4&gt;Testing&lt;/h4&gt;
&lt;p&gt;Make sure that all the project you care about have continuous integration on
Python 3, if possible even the documentation building done with Python 3, help
to make Python 3 the default.&lt;/p&gt;
&lt;p&gt;With continuous integration, check that your favorites projects are tested on
Python Nightly, most CI provider allow the tests to be ran on nightly, but do
not make the status of the project turn red if the test are failing. See
&lt;a href="http://docs.travis-ci.com/user/customizing-the-build/#Rows-that-are-Allowed-to-Fail"&gt;&lt;code&gt;allow_faillure&lt;/code&gt;&lt;/a&gt;
on Travis-CI for example.&lt;/p&gt;
&lt;h4&gt;Porting C-extensions, move to Cython&lt;/h4&gt;
&lt;p&gt;The path to migrate C-extension is not well documented, the preferred approach
is to use &lt;a href="https://cffi.readthedocs.org/en/latest/"&gt;CFFI&lt;/a&gt;, but there is still
alack of well written centralised, document on how to integrate with Python 3.
IF you are knowledgeable on this domain, your help is welcomed.&lt;/p&gt;
&lt;h3&gt;The things we will (probably) not do.&lt;/h3&gt;
&lt;p&gt;Make a twitter account that shame people that use Legacy Python, though we
might do a Parody account which say funny things, and push people toward Python 3.&lt;/p&gt;
&lt;p&gt;Slow code on purpose and obviously on Legacy Python:&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;sys&lt;/span&gt;
&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;sys&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;version_info&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;time&lt;/span&gt;
    &lt;span class="n"&gt;time&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sleep&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;


&lt;p&gt;Though it would be fun.&lt;/p&gt;
&lt;p&gt;Ask user at IDE/CLI startup time if they want to upgrade to Python3:&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;$ python2
Python &lt;span class="m"&gt;2&lt;/span&gt;.7.10 &lt;span class="o"&gt;(&lt;/span&gt;default, Jul &lt;span class="m"&gt;13&lt;/span&gt; &lt;span class="m"&gt;2015&lt;/span&gt;, &lt;span class="m"&gt;12&lt;/span&gt;:05:58&lt;span class="o"&gt;)&lt;/span&gt;
Type &lt;span class="s2"&gt;"help"&lt;/span&gt;, &lt;span class="s2"&gt;"copyright"&lt;/span&gt;, &lt;span class="s2"&gt;"credits"&lt;/span&gt; or &lt;span class="s2"&gt;"license"&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; more information.

Warning you are starting a Legacy Python interpreter. Aren&lt;span class="s1"&gt;'t you sure you don'&lt;/span&gt;t
want not to upgrade to a newer version ? &lt;span class="o"&gt;[&lt;/span&gt;y&lt;span class="o"&gt;]&lt;/span&gt;:_
&lt;/pre&gt;


&lt;p&gt;Delay Legacy Python packages releases by a few weeks to incentive people to
migrate, or should we actually consider the people on Python 2 as guinea pig
and release nightly ?&lt;/p&gt;
&lt;h2&gt;End word&lt;/h2&gt;
&lt;p&gt;Remember, Legacy Python is responsible for global warming, encourage people to
stay with IE6, and is voting for Donald Trump.&lt;/p&gt;
&lt;p&gt;If you have any ideas, please send me a Pull Request, I'll be happy to discuss. &lt;/p&gt;
&lt;p&gt;As usual my English is far from perfect, so Pull Request welcomed on this blog
post. Thanks to @michaelpacer who already did some rereading/rephrasing of
first draft.&lt;/p&gt;&lt;/div&gt;</description><category>python</category><guid>https://carreau.github.io/posts/planning-an-early-death-for-python-2.html</guid><pubDate>Thu, 24 Sep 2015 10:00:00 GMT</pubDate></item></channel></rss>